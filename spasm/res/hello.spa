module hello
    class Int
        field @var val : basic.int
    end

    class Reference[T]
        field @var val : [T]

        method get()
            lfload self
            mfload val
            ret
        end

        method set([T])
            arg @const val : [T]
            
            aload val
            lfload self
            pmfstore val
            vret
        end
    end

    method log[T]([T])
        arg @const value : [T]

        const "LOG: "
        aload value
        o2s
        concat
        println
        vret
    end

    method foo()
        local @var i : basic.int

        const 49
        plfstore i                   # stores 0 to i

        const "Hello, World"
        println                     # prints "Hello, World"

        lfload i
        const 64
        add
        println                     # prints i + 64

        vret
    end

    method reif_test()
        local @var ref : hello.Reference[T]

        # Reference[Int]
        gfload hello.Reference[T]
        gfload hello.Int
        reifiedload 1
        
        # ref = Reference[Int]()
        objload
        plfstore ref

        # println "T = " + (gettype (ref.get())).str
        const "T = "
        lfload ref
        vinvoke hello.Reference[T].get()
        gettype
        o2s
        concat
        println

        # println ref.get()
        lfload ref
        vinvoke hello.Reference[T].get()
        println

        # ref.set(2)
        lfload ref
        const 2
        vinvoke hello.Reference[T].set([T])
        
        # println ref.get()
        lfload ref
        vinvoke hello.Reference[T].get()
        println

        vret
    end

    method met_reif_test()
        gfinvoke hello.ref_test()

        gfload hello.log[T]([T])
        gfload hello.Int
        reifiedload 1

        gfload hello.Int
        objload

        invoke 1

        vret
    end

    method loop_test()
        local @var i : basic.int

        const 0
        plfstore i
        
    $loop_start:
        lfload i
        const 10
        jge $loop_end

        const "hello, world "
        lfload i
        o2s
        concat
        println

        lfload i
        const 1
        add
        plfstore i
        jmp $loop_start
    $loop_end:
        vret
    end

    method match_test(basic.int)
        arg @const val : basic.int
        match match$0
            0 -> $match$0$0
            1 -> $match$0$1
            2 -> $match$0$2
            3 -> $match$0$3
            4 -> $match$0$4
            _ -> $match$0$5
        end

        aload val
        mtfperf match$0
    $match$0$0:
        const "zero"
        jmp $end
    $match$0$1:
        const "one"
        jmp $end
    $match$0$2:
        const "two"
        jmp $end
    $match$0$3:
        const "three"
        jmp $end
    $match$0$4:
        const "four"
        jmp $end
    $match$0$5:
        const "none"
        jmp $end
    $end:
        println
        vret
    end

    method @entry main()
        # gfinvoke hello.foo()
        # gfinvoke hello.reif_test()
        # gfinvoke hello.met_reif_test()
        # gfinvoke hello.loop_test()

        const 2
        gfinvoke hello.match_test(basic.int)
        vret
    end
end