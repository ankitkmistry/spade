module hello
    class Int
        field @var val : basic.int
    end

    class Reference[T]
        field @var val : [T]

        method get()
            lfload self
            mfload val
            ret
        end

        method set([T])
            arg @const val : [T]
            
            aload val
            lfload self
            mfstore val
            vret
        end
    end

    method foo()
        local @var i : basic.int

        const 49
        plfstore i                   # stores 0 to i

        const "Hello, World"
        println                     # prints "Hello, World"

        lfload i
        const 64
        add
        println                     # prints i + 64

        vret
    end

    method ref_test()
        local @var ref : hello.Reference[T]

        # Reference[Int]
        gfload hello.Reference[T]
        gfload hello.Int
        reifiedload 1
        
        # ref = Reference[Int]()
        objload
        plfstore ref

        # println "T = " + (gettype (ref.get())).str
        const "T = "
        lfload ref
        vinvoke hello.Reference[T].get()
        gettype
        o2s
        concat
        println

        # println ref.get()
        lfload ref
        vinvoke hello.Reference[T].get()
        println

        # ref.set(2)
        lfload ref
        const 2
        vinvoke hello.Reference[T].set([T])
        
        # println ref.get()
        lfload ref
        vinvoke hello.Reference[T].get()
        println

        vret
    end

    method @entry main()
        local @var i : basic.int

        gfinvoke hello.foo()
        gfinvoke hello.ref_test()

        const 0
        plfstore i
        
    $loop_start:
        lfload i
        const 10
        jge $loop_end

        const "hello, world "
        lfload i
        o2s
        concat
        println

        lfload i
        const 1
        add
        plfstore i
        jmp $loop_start
    $loop_end:
        vret
    end
end